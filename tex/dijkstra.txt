 Funktion Dijkstra(Graph, Startknoten):
     initialisiere(Graph,Startknoten,abstand[],vorgaenger[],Q)
     solange Q nicht leer:                       // Der eigentliche Algorithmus
         u := Knoten in Q mit kleinstem Wert in abstand[]
         entferne u aus Q                                // fuer u ist der kuerzeste Weg nun bestimmt
         fuer jeden Nachbarn v von u:
             falls v in Q:
                distanz_update(u,v,abstand[],vorgaenger[])   // pruefe Abstand vom Startknoten zu v
     return vorgaenger[]

 Methode initialisiere(Graph,Startknoten,abstand[],vorgaenger[],Q):
     fuer jeden Knoten v in Graph:
         abstand[v] := unendlich
         vorgaenger[v] := null
     abstand[Startknoten] := 0
     Q := Die Menge aller Knoten in Graph

 Methode distanz_update(u,v,abstand[],vorgaenger[]):
     alternativ := abstand[u] + abstand_zwischen(u, v)   // Weglaenge vom Startknoten nach v ueber u
     falls alternativ < abstand[v]:
         abstand[v] := alternativ
         vorgaenger[v] := u
